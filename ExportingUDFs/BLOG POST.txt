BLOG POST

Title:
Interactive Debugging for Python UDFs

#########INTRODUCTION:
In a previous blogpost we introduced MonetDB/Python. With MonetDB/Python [https://www.monetdb.org/blog/embedded-pythonnumpy-monetdb], users can perform analytics inside the database(aka In-Database Analytics) by mitigating the costs of data transference.

While UDFs can perform highly efficient data analysis, debugging them has been a long-standing problem. Because the UDFs are executed within the database server, developers cannot use sophisticated debugging techniques (e.g., Interactive Debugging). Instead, they have to resort to inefficient debugging strategies (e.g., Print/Log-file debugging) in an effort to make the code work.

In this blogpost, we show a solution to this problem. From within a client connected to a database, we ask the user to provide us with a problematic SQL statement that they want to debug. We then analyze it, and extract any required input data from the database server. We transfer the input data and the source code of the UDF to the client. Finally, we execute the function in the client process exactly as it would have been executed in the database server. The developer can then easily use interactive debugging tools to aid him in creating and modifying the UDFs. Loopback queries are supported in our extension when using console debugging.


##########SETUP:
#MonetDB Installation:
Currently MonetDB/Python is available in the in-development version of MonetDB in the default branch and must be compiled from source. Note that you will need NumPy installed for embedded python to work. You can look here for information on how to install NumPy. To compile the pythonudf branch from scratch, you can download a tar file of the source here. You can then compile the source by running the following commands in the root directory of the source tree.

./bootstrap
./configure --prefix=<install_directory>
make install
You can then run MonetDB by starting the monetdbd daemon or mserver5 in the given installation directory. Note that you will need to explicitly enable Python integration using the following commands if you are using the monetdbd daemon.

monetdb stop pytest
monetdb set embedpy=true pytest
monetdb start pytest
Or the following command if you are running mserver5.

mserver5 --set embedded_py=true
You can then connect to MonetDB and use embedded python.


#PymonetDB Installation:
You just need to download the client version with the debugging extensions and execute the following command in the pymonetdb folder: python setup install

Pymonetdb with debugging extension : goo.gl/tcKSfi



##########Usage
-- Mean Deviation Example
[1.sql]
In our example we have a UDF that is supposed to compute the mean absolute deviation of a given column. However we introduce a logical error in line 9 by not taking the absolute value in consideration. Usually the developer must insert print statements to track variable changes. However we extend the pymonetdb client, allowing the user to easily export the UDF.

--Debug Function
def debug(self, query, fname,sample = -1)
[debug.py]
To perform terminal debugging the developer connects to a running database using the Python client. Then, he creates a SQL query involving the UDF, just as he would if he were to normally execute the query. However, instead of executing it, he calls either the debug function (line 5) for console debugging or the export function (line 6) for IDE debugging. In case of console debugging an instance of pdb is started.

The problem with transferring the input data of UDFs from the database to the client is that the amount of data can be very large. This is only required for debugging, however. The actual execution of the UDFs still occurs completely inside the database server. Still, it is possible that the clientsâ€™ machine does not have space for all the required input data. For this reason, we also introduce an optional sampling step that only transfers a uniform random sample of the data instead of the full input data set.

--Export Function
def export(self, query, fname,sample = -1, filespath='./')
Here we have an example of the function exported for IDE debugging. The main difference from the debug() function is that the UDF and the data are stored in disk in a python and binary files respectively. Code is generated in order to allow the deserialization of the input data (line 15) and the function call is also generated (line 16). The code is ready to be imported and executed in IDEs and accepts a path parameter where the developer can specify where the data must be stored.
[mean_deviation.py]



########Author:
Pedro Holanda is a PhD student working at CWI. He is currently working on his PhD's thesis at the CWI Database Architectures Group.